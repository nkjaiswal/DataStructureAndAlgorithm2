public class WordSearchBoard {
    private int findWord(char[][] board, String word, int i, int j) {
        // check for board boundaries
        if(i==-1 || j==-1 || i>= board.length || j>=board[0].length) {
            return 0;
        }
        if(word.length() == 1) {
            return board[i][j] == word.charAt(0) ? 1 : 0;
        }
        if(board[i][j] == word.charAt(0)) {
            String nextString = word.substring(1);
            int top = this.findWord(board, nextString, i-1, j);
            int bottom = this.findWord(board, nextString, i+1, j);
            int left = this.findWord(board, nextString, i, j-1);
            int right = this.findWord(board, nextString, i, j+1);
            return Math.max(Math.max(top, bottom), Math.max(left, right));
        }
        return 0;
    }
    public int exist(String[] A, String B) {
        char[][] board = new char[A.length][A[0].length()];
        int i=0;
        int max = Math.max(A.length, A[0].length());
        int[][] startIndex = new int[max*max][2];
        int counter = 0;
        char first = B.charAt(0);
        for(String word: A) {
            int j=0;
            for(char c: word.toCharArray()) {
                if(first == c) {
                    startIndex[counter][0] = i;
                    startIndex[counter][1] = j;
                    counter++;
                }
                board[i][j++] = c;
            }
            i++;
        }
        for(int count = 0; count < counter; count ++) {
            if(findWord(board, B, startIndex[count][0], startIndex[count][1]) == 1) {
                return 1;
            }
        }
        return 0;
    }

    public static void main(String[] args) {
        String[] wordArray = {
                "ABCACACBBABACCCABCBABBBBAAAACABBACACCAABBACBABAACCABCBAACABBBBCCAABBCBACBBBBACCACACCAACCBCABAAACBB", "CBBAAACCABBAACCBBABCCBCABCBBAAACAACBCBCBAACBAABAACAABCABACBCACCACCAAABCBBCACCCBBCCBCCABCBACAAABCAB", "CACCCBBCAAACBACCABAACABCBCABAACCCBBBACCACABAAABCBBCBBCCAABCACBCBAABAACBBABCBBCCACBBBBBBCBABBABCCCB", "ABBCABBAAAACBBABBCCBBCCACBBACACABCCBCACBBACCAACCBCABACCBABCBBBBCCBCABCBCBCBCBCBBBCBACBBAABCAACBACC", "CBCABBCABBAAABABBAABCBABBCAABAACCCBABABBACCCCACCBBBBBBAABCBBABACCCBBCACACABBBAABBBABBABCCABCCBCBCB", "BBAABAABBBACBAABBCCCACCCCABCABABBCCCCABBCBBCAAABACCAABCCBBBACCBACBAACAACBABBCBACBCABACCBABACCCACBA", "ACCCAAABACCAABCBABABAABAACBCBBABCBABBCCBBBBCAACCCACABAACBABABCCACBAACCAABCCAAACBABCCCCCCBBCCABCBCB", "BABCACABBAABBBBABCCBACACBBAACACBCAABCABBCCCCCBCBCCCABBABCCCCCBCACBCBBBAACCCCCCCBACBCABCCCBBAAABCCA", "ABAACCABBBCABACCABACBBAABAABBBCCBBCBCBBAABCABCACCAABCACCCCABABACCCAAACBACAAACABBABAABBBCABAABCACAA", "CBCABABAAACCBAAACCCABABBBAABCBBCCBCBBBABCBAABBCABABBBCABABBCACACBCBBCACBCACAAACACBCBCACCBAAACBBACC", "CCACABABCCBCAABCABCBACCACACCBBACABBBBBACABBACACABBCBABBACCCCCBBAACCBBCBBBCAABBABCACBCBCACCCCBBCAAB", "CCCCBAAABCBACABBBACCBAABBACBCCCBAABACBAAAABAACCABABBCCCBBCCBBBACBACBAAABAACAACCBCCAABCABCACBCACAAA", "CAAACBBBACBABABCABCACCABBCCCBABCBAAABBBBCCACBABBCBACAACAAABBABABCACAABBAACACABBBCBCBACCCACCAAACABC", "CABAACCCBBBABACAABBBBBABBABBACCACCCACBABAACCBCBBBBCAACAACCABCACCBCCAACBBCACAAABBACAACCACCBABAAABCB", "CBBABBACCAACCCBCCABBCACACCCCCBBCCCBAABCBBABBCBCCCCCBBABBACABCACCBBABBAAABCBCCCBABACCCCBBABABBCCABB", "BCCCCBCACAACBBABCACBCCBABCBBABCBBCBCAAAAABABBCBBACCBBABCCBBBBCBCBBCABACCAABABABBBCABCAAABCBBCCABAB", "AAACCBCCABABBCBBABBCAABAACAABABCBCCACABABCBCBBABCCCCACBCBCCAACCCACACACABBBBBAAAAACCCABACBABCACCCAB", "CBBCCCBBCBBCBABCBACCABBCBBBCABBCABAAACBCCACCBCCABABCBBBCBAACCAABCACCBAAACACACCACBABABBACABBABCCCBC", "CBABACCACABAABACCACACABCBBBACABBAABBAAACABAACABAACBCCBAACBCAABCBCBCCBCABABBBCBBCCBCBBCCABCCCACABBA", "BABBACACCBABCABAABCAACCBAACBBAABBBACCABCCCBBBCAAAABCCBCACACCABCCCBBBCCACCCAAAACCBBCCCAAAACCBBAAABA"
        };
        System.out.println(new WordSearchBoard().exist(wordArray, "BCCBACABACCBBACABBCBBBBCCBBBCBCBB"));
    }
}
